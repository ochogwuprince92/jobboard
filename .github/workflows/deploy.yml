name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to server
      run: |
        echo "Backend deployment would happen here"
        echo "Configure with your deployment service (Heroku, AWS, DigitalOcean, etc.)"
    
    # Example for Heroku
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.14
    #   with:
    #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"
    #     appdir: "backend"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install and build
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
      run: |
        npm ci
        npm run build
    
    - name: Deploy to Vercel
      run: |
        echo "Frontend deployment would happen here"
        echo "Configure with Vercel, Netlify, or your preferred service"
    
    # Example for Vercel
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    #     working-directory: ./frontend

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-backend, deploy-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
